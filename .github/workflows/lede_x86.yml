name: lede_x86

on:
  workflow_dispatch:
#  schedule:
#    - cron: "0 16 * * *"

env:
  OPENWRT_NAME: lede
  REPO: moruiris/Actions-OpenWrt
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: lede/x86/.config
  CONFIG_BUILD: lede/x86/config.buildinfo
  DIY_P1_SH: lede/diy-part1.sh
  DIY_P2_SH: lede/diy-part2.sh
  UPLOAD_BIN: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 释放Ubuntu磁盘空间
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 加载项目文件
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get full-upgrade -y
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
        libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
        libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
        ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
        python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
        upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

    - name: 设置当前的日期
      run: |
        sudo timedatectl set-timezone "$TZ"
        echo "date1=$(date +'%Y.%m.%d-%H.%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date3=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV

    - name: 下载固件源码
      run: |
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt

    - name: 执行DIY_P1_SH
      run: |
        chmod +x ${{ env.DIY_P1_SH }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }}

    - name: 更新feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载config 执行DIY_P2_SH defconfig
      run: |
        [ -e ${{ env.CONFIG_BUILD}} ] && mv ${{ env.CONFIG_BUILD}} openwrt/.config
        chmod +x ${{ env.DIY_P2_SH }}
        cd openwrt
        $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }}
        make defconfig

    - name: 下载安装包
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: 获取固件设备名字
      working-directory: ./openwrt
      run: |
        grep '^CONFIG_TARGET_.*_DEVICE_.*=y' .config | sed -r 's/^CONFIG_TARGET_(.*)_DEVICE_(.*)=y/\1_\2/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV

    - name: 上传bin目录文件
      if: steps.compile.outcome == 'success' && env.UPLOAD_BIN == 'true'
      uses: actions/upload-artifact@main
      with:
        name: bin_${{ env.OPENWRT_NAME }}_${{ env.DEVICE_NAME }}_${{ env.date1 }}
        path: openwrt/bin

    - name: 整理文件到firmware目录
      id: organize
      if: steps.compile.outcome == 'success'
      run: | 
        mkdir firmware
        cp -v ./openwrt/.config  ./firmware/${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.DEVICE_NAME }}.config
        find openwrt/bin/targets/*/*/ -maxdepth 1 \
        -name "config.buildinfo" \
        -or -name "*squashfs-combined*" \
        | xargs cp -t ./firmware/
        cd firmware
        sudo apt-get install -y rename
        rename -v 's/^/${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.DEVICE_NAME }}_/' config.buildinfo
        rename -v 's/^/${{ env.date1 }}_${{ env.OPENWRT_NAME }}_/' *squashfs-combined*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 上传firmware目录文件
      if: steps.organize.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: firmware_${{ env.OPENWRT_NAME }}_${{ env.DEVICE_NAME }}_${{ env.date1 }}
        path: ${{ env.FIRMWARE }}

    - name: 生成release描述
      id: release
      if: steps.organize.outcome == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        touch release.txt
        echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt
        echo "📥 固件下载" >> release.txt

    - name: 发布至release
      if: steps.release.outcome == 'success'
      uses: softprops/action-gh-release@master
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ env.date2 }}
        body_path: release.txt

    - name: config文件上传自动更新1
      run : |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    - name: config文件上传自动更新2
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/${{ env.REPO }}.git main
    - name: config文件上传自动更新3
      run: |
        cp ./openwrt/.config $GITHUB_WORKSPACE/main/${{ env.CONFIG_FILE }}
        cp ./openwrt/bin/targets/*/*/config.buildinfo $GITHUB_WORKSPACE/main/${{ env.CONFIG_BUILD }}
        cd $GITHUB_WORKSPACE/main
        git add .
        if git diff --cached --quiet; then
          echo "nothing to commit"
        else
          git commit -am "update $(date '+%Y-%m-%d %H:%M:%S')"
          git push --quiet "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.REPO }}.git" HEAD:main
        fi

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 删除工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        delete_workflow_pattern: ${{ github.workflow }}
        retain_days: 7
        keep_minimum_runs: 0
